{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["socket","io","connect","App","useState","me","setMe","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","idToCall","setIdToCall","callEnded","setCallEnded","name","setName","myVideo","useRef","userVideo","connectionRef","useEffect","navigator","mediaDevices","getUserMedia","video","audio","then","current","srcObject","on","id","data","from","signal","style","textAlign","color","className","playsInline","muted","ref","autoPlay","width","TextField","label","variant","value","onChange","e","target","marginBottom","text","Button","startIcon","fontSize","onClick","destroy","IconButton","aria-label","peer","Peer","initiator","trickle","emit","userToCall","signalData","callUser","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ae09851.chunk.js","sourcesContent":["import Button from \"@material-ui/core/Button\"\r\nimport IconButton from \"@material-ui/core/IconButton\"\r\nimport TextField from \"@material-ui/core/TextField\"\r\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\r\nimport PhoneIcon from \"@material-ui/icons/Phone\"\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\r\nimport Peer from \"simple-peer\"\r\nimport io from \"socket.io-client\"\r\nimport \"./App.css\"\r\n\r\n\r\nconst socket = io.connect('https://animesh-videoapp-backend.herokuapp.com/')\r\nfunction App() {\r\n\tconst [ me, setMe ] = useState(\"\")\r\n\tconst [ stream, setStream ] = useState()\r\n\tconst [ receivingCall, setReceivingCall ] = useState(false)\r\n\tconst [ caller, setCaller ] = useState(\"\")\r\n\tconst [ callerSignal, setCallerSignal ] = useState()\r\n\tconst [ callAccepted, setCallAccepted ] = useState(false)\r\n\tconst [ idToCall, setIdToCall ] = useState(\"\")\r\n\tconst [ callEnded, setCallEnded] = useState(false)\r\n\tconst [ name, setName ] = useState(\"\")\r\n\tconst myVideo = useRef()\r\n\tconst userVideo = useRef()\r\n\tconst connectionRef= useRef()\r\n\r\n\tuseEffect(() => {\r\n\t\tnavigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\r\n\t\t\tsetStream(stream)\r\n\t\t\t\tmyVideo.current.srcObject = stream\r\n\t\t})\r\n\r\n\tsocket.on(\"me\", (id) => {\r\n\t\t\tsetMe(id)\r\n\t\t})\r\n\r\n\t\tsocket.on(\"callUser\", (data) => {\r\n\t\t\tsetReceivingCall(true)\r\n\t\t\tsetCaller(data.from)\r\n\t\t\tsetName(data.name)\r\n\t\t\tsetCallerSignal(data.signal)\r\n\t\t})\r\n\t}, [])\r\n\r\n\tconst callUser = (id) => {\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: true,\r\n\t\t\ttrickle: false,\r\n\t\t\tstream: stream\r\n\t\t})\r\n\t\tpeer.on(\"signal\", (data) => {\r\n\t\t\tsocket.emit(\"callUser\", {\r\n\t\t\t\tuserToCall: id,\r\n\t\t\t\tsignalData: data,\r\n\t\t\t\tfrom: me,\r\n\t\t\t\tname: name\r\n\t\t\t})\r\n\t\t})\r\n\t\tpeer.on(\"stream\", (stream) => {\r\n\t\t\t\r\n\t\t\t\tuserVideo.current.srcObject = stream\r\n\t\t\t\r\n\t\t})\r\n\t\tsocket.on(\"callAccepted\", (signal) => {\r\n\t\t\tsetCallAccepted(true)\r\n\t\t\tpeer.signal(signal)\r\n\t\t})\r\n\r\n\t\tconnectionRef.current = peer\r\n\t}\r\n\r\n\tconst answerCall =() =>  {\r\n\t\tsetCallAccepted(true)\r\n\t\tconst peer = new Peer({\r\n\t\t\tinitiator: false,\r\n\t\t\ttrickle: false,\r\n\t\t\tstream: stream\r\n\t\t})\r\n\t\tpeer.on(\"signal\", (data) => {\r\n\t\t\tsocket.emit(\"answerCall\", { signal: data, to: caller })\r\n\t\t})\r\n\t\tpeer.on(\"stream\", (stream) => {\r\n\t\t\tuserVideo.current.srcObject = stream\r\n\t\t})\r\n\r\n\t\tpeer.signal(callerSignal)\r\n\t\tconnectionRef.current = peer\r\n\t}\r\n\r\n\tconst leaveCall = () => {\r\n\t\tsetCallEnded(true)\r\n\t\tconnectionRef.current.destroy()\r\n\t}\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h1 style={{ textAlign: \"center\", color: '#fff' }}>Zoomish</h1>\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"video-container\">\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{stream &&  <video playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\" }} />}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"video\">\r\n\t\t\t\t\t{callAccepted && !callEnded ?\r\n\t\t\t\t\t<video playsInline ref={userVideo} autoPlay style={{ width: \"300px\"}} />:\r\n\t\t\t\t\tnull}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"myId\">\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"Name\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={name}\r\n\t\t\t\t\tonChange={(e) => setName(e.target.value)}\r\n\t\t\t\t\tstyle={{ marginBottom: \"20px\" }}\r\n\t\t\t\t/>\r\n\t\t\t\t<CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\r\n\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" startIcon={<AssignmentIcon fontSize=\"large\" />}>\r\n\t\t\t\t\t\tCopy ID\r\n\t\t\t\t\t</Button>\r\n\t\t\t\t</CopyToClipboard>\r\n\r\n\t\t\t\t<TextField\r\n\t\t\t\t\tid=\"filled-basic\"\r\n\t\t\t\t\tlabel=\"ID to call\"\r\n\t\t\t\t\tvariant=\"filled\"\r\n\t\t\t\t\tvalue={idToCall}\r\n\t\t\t\t\tonChange={(e) => setIdToCall(e.target.value)}\r\n\t\t\t\t/>\r\n\t\t\t\t<div className=\"call-button\">\r\n\t\t\t\t\t{callAccepted && !callEnded ? (\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" onClick={leaveCall}>\r\n\t\t\t\t\t\t\tEnd Call\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t) : (\r\n\t\t\t\t\t\t<IconButton color=\"primary\" aria-label=\"call\" onClick={() => callUser(idToCall)}>\r\n\t\t\t\t\t\t\t<PhoneIcon fontSize=\"large\" />\r\n\t\t\t\t\t\t</IconButton>\r\n\t\t\t\t\t)}\r\n\t\t\t\t\t{idToCall}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t{receivingCall && !callAccepted ? (\r\n\t\t\t\t\t\t<div className=\"caller\">\r\n\t\t\t\t\t\t<h1 >{name} is calling...</h1>\r\n\t\t\t\t\t\t<Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\r\n\t\t\t\t\t\t\tAnswer\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : null}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}